매개변수에 = '값'을 지정하면 기본값으로 사용할 수 있다. 이를 선택적 매개변수라고 한다.
기본값을 설정하지 않은 것을 비선택적 매개변수라고 하는데 항상 비선택적 매개변수를 먼저 나열하고 그 이후에 선택적 매개변수를 나열한다.

udefined
:Represents 'no value'
null
:Also represents 'no value' Use 'null' if you explicitly want to set this as a value
NAN(Not a Number) 
:A number was expected but could not be derived

...매개변수(나머지 매개변수-Rest Parameters)
: 이 함수는 매개변수의 양에 관계없이 허용한다는 의미이고 이후 배열로 받는다. 
- Combine any amount of received parameters into an array
- Used in function parameter lists(when defining a function)
...변수(스프레드 연산자)
:이를 함수 정의시 말고 함수를 사용할 때 사용하는 경우(구체적인 값이 필요한 곳) 배열을 숫자 목록으로 분산시킨다
- Split array or object values into a comma-separated list of values
- Used in any place where an array or objects should be split up
- For example, the built-in Math.min() and Math.max() functions want lists of values(NOT arrays).

함수는 객체이기에 속성을 추가할 수 있다.
배열 또한 객체이다.

`문자`역따옴표 문자(템플릿 리터럴)
- 여러 줄 문자열을 작성할 수 있게 해줌. 
- ${변수} 자리 표시자를 사용하면 + 없이 변수와 문자열을 나란히 쓸 수 있다.

배열.push('')는 배열에 ''를 추가하라는 의미.

Primitive values(기본값)
- simple values / numbers, strings, booleans, udefined, null / Stored in a more basic kind of computer memory / Don't occupy a lot of space, hence copying values is 'cheap' / Values themselves are sotred in variables or constants

Reference values(참조값)
- more complex values / All objects(incl. functions and arrays) / stored in a different kind of computer memory / can occupy a lot of space, hence copying values is 'expensive' / Only addresses of (shared) values are stored in variables or constants
- ex) const hobbies = ['Sports', 'Cooking'];
const newHobbies = hobbies;
newhobbies.push('Reading');
console.log(hobbies);
의 경우 ['Sports', 'Cooking', 'Reading'] 이 출력되는데 왜냐하면 배열의 경우 참조 값이므로 주소가 동일하기때문에 newHobbies를 변경하면 원래 배열이 변경된다. 

try {

} catch {
    
}
: try하고 try 안이 오류가 있는 경우 catch를 실행한다 그리고 그 이후는 그대로 실행한다.(오류가 있는경우 그대로 멈추는 경우가 많은데 이 경우는 오류가 있어도 그대로 실행할 수 있음)

가변 범위(scoping)
- 변수(및 상수)는 정의된 범위(및 '중첩 범위')에서만 사용할 수 있다.

클래스(생성자 함수)
- 객체에 관한 blue print 첫글자는 대문자로
- 동일한 모양을 가진여러 객체가 필요한 경우 유용
ex)
class Job {
    constructor(){
        this. //생성될 객체를 참조 클래스를 기반으로 하는 객체
    }
}

배열 비구조화
ex) const input = ['Max', 'Schwarzmuller'];
const firstName = input[0];
const lastName = input[1];
const [ first, last ] = input;

객체 비구조화
ex) const job = { title: 'Developer', location: 'New York'};
const { title, location } = job; // 대신 이 경우 속성 이름을 꼭 써줘야한다.
const { title: jTitle } = job; // 만약 속성 이름 말고 다른 이름으로 하고싶은 경우 이렇게 이용하면 된다.

Synchronous(동기)
- This operation must be completed before following operations (code) can be strted and executed.

Asynchronous(비동기)
- This operations can be executed simultanousely with other operations. It does NOT block the execution of following code.
- callback function을 필요로한다
└ Lots of dependent asynchronous tasks lead to nested callback functions → callback hell.

Promises
- In JavaScript, we also have built-in, standardized objects that are called 'Promises' that can wrap asynchronous operations.
- Promises의 경우 then method를 가진다. asyn임에도 앞에 것 진행후 then을 진행한다.
- using Promises To solve 'callback hell' because Promises can be returned and chained, less nesting is required to orchestrate multiple dependent asynchronous tasks

Try will not catch errors caused by asynchronous operations when working with callback functions

async function
- 이 함수는 명시적으로 반환하지 않고 자동으로 프로미스를 반환
- 프로미스를 반환하는 곳에 쓸 수 있는데 await을 사용하면 await 다음 코드를 then 블록에 넣은 다음 then 메소드가 호출되고 익명 함수가 자바스크립트에 의해 자동으로 then으로 전달
- try - catch를 사용할 수 있다.